// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: characters.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCharacter = `-- name: CreateCharacter :one
INSERT INTO characters (id, name, status, species, type, gender, image, url, created, origin_id, location_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, name, status, species, type, gender, image, url, created, origin_id, location_id
`

type CreateCharacterParams struct {
	ID         int32       `json:"id"`
	Name       string      `json:"name"`
	Status     string      `json:"status"`
	Species    string      `json:"species"`
	Type       string      `json:"type"`
	Gender     string      `json:"gender"`
	Image      string      `json:"image"`
	Url        string      `json:"url"`
	Created    time.Time   `json:"created"`
	OriginID   pgtype.Int4 `json:"origin_id"`
	LocationID pgtype.Int4 `json:"location_id"`
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (Character, error) {
	row := q.db.QueryRow(ctx, createCharacter,
		arg.ID,
		arg.Name,
		arg.Status,
		arg.Species,
		arg.Type,
		arg.Gender,
		arg.Image,
		arg.Url,
		arg.Created,
		arg.OriginID,
		arg.LocationID,
	)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.Species,
		&i.Type,
		&i.Gender,
		&i.Image,
		&i.Url,
		&i.Created,
		&i.OriginID,
		&i.LocationID,
	)
	return i, err
}

const getMissingCharacterIDs = `-- name: GetMissingCharacterIDs :many
WITH input_ids AS (
    SELECT UNNEST($1::int[]) AS id
)
SELECT id::int4 AS id
FROM input_ids
WHERE id NOT IN (
    SELECT id FROM characters
)
`

func (q *Queries) GetMissingCharacterIDs(ctx context.Context, dollar_1 []int32) ([]int32, error) {
	rows, err := q.db.Query(ctx, getMissingCharacterIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
